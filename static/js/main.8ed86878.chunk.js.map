{"version":3,"sources":["components/Header.js","lib/api.js","lib/translate.js","lib/utils.js","components/Graphs/Accumulative.js","components/Graphs/Increment.js","lib/csvLoader.js","components/Graphs/ByState.js","components/Graphs.js","pages/App.js","index.js"],"names":["Header","className","getData","fetch","then","response","json","data","translationObj","translate","originalName","createPlotGraph","type","Object","keys","map","key","x","date","y","name","filter","value","Accumulative","width","mapData","confirmedGraphData","deathGraphData","theme","VictoryTheme","material","height","domainPadding","padding","animate","duration","onLoad","containerComponent","labels","datum","moment","format","style","touchAction","labelComponent","fontSize","cornerRadius","centerOffset","flyoutStyle","stroke","fill","tickCount","tickFormat","label","tickLabelComponent","tickLabels","dependentAxis","Increment","graphColor","incrementData","filteredValue","index","incrementPlotGraph","averageData","avgIncrease","length","toFixed","incrementAverage","strokeWidth","dy","dx","angle","color","createPlotData","object","reverse","groupedByDate","_mapValues","_groupBy","groupedData","reduce","previousValue","currentValue","suspects","deaths","cases","refuses","ByState","scatterData","state","uf","createStatePlotData","console","log","Graphs","useState","setMapData","window","innerWidth","setWidth","updateWidth","ev","target","retrieveData","a","apiData","useEffect","interval","setInterval","clearInterval","addEventListener","_throttle","removeEventListener","chartGraph","incrementConfirmedGraph","incrementDeathMap","confirmedByState","deathsByState","App","placeItems","href","document","title","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8ed86878.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header () {\n    return (\n        <div className='p-8 w-full text-center text-3xl text-blue-800 shadow-xs font-thin'>\n            Novo Coronavirus (Covid-19) - Brasil\n        </div>\n    )\n}\n\nexport default Header\n","export function getData () {\n    return fetch('https://pomber.github.io/covid19/timeseries.json')\n        .then(response => response.json())\n        .then(data => {\n            return data['Brazil'];\n        })\n}\n","const translationObj = {\n    'confirmed': 'Confirmados',\n    'cases': 'Confirmados',\n    'deaths': 'Mortes',\n    'refuses': 'Descartados',\n    'recovered': 'Recuperados'\n}\n\nexport function translate (originalName) {\n    return translationObj[originalName];\n}\n","export function createPlotGraph(data, type) {\n    return Object.keys(data).map((key) => {\n        return {\n            x: data[key].date,\n            y: data[key][type],\n            name: type,\n        }\n    }).filter((value) => value.y > 0)\n}\n\nexport function incrementPlotGraph(data, type) {\n    return Object.keys(data).filter((value) => {\n        return data[value][type] > 0;\n    }).map((filteredValue, index) => {\n        return {\n            x: index + 1,\n            y: data[filteredValue][type] - data[filteredValue - 1][type]\n        }\n    })\n}\n\n\nexport function incrementAverage(data) {\n    let avgIncrease = 0;\n\n    for (let index = 1; index < data.length; index++) {\n        let valueToAdd = data[index - 1].y === 0 ? 0 : (data[index].y - data[index - 1].y) / data[index - 1].y;\n        avgIncrease = avgIncrease + valueToAdd;\n    }\n    return ((avgIncrease / (data.length)) * 100).toFixed(2);\n}","import React from 'react'\nimport moment from 'moment'\nimport {\n    VictoryChart,\n    VictoryVoronoiContainer,\n    VictoryTheme,\n    VictoryArea,\n    VictoryTooltip,\n    VictoryAxis,\n    VictoryLabel,\n} from 'victory'\n\nimport { translate } from '../../lib/translate'\nimport { createPlotGraph } from '../../lib/utils'\n\nexport default function Accumulative({ width, mapData }) {\n\n    const confirmedGraphData = createPlotGraph(mapData, 'confirmed');\n    const deathGraphData = createPlotGraph(mapData, 'deaths')\n\n    return (\n        <VictoryChart\n            theme={VictoryTheme.material}\n            width={width}\n            height={550}\n            domainPadding={width < 500 ? 10 : 50}\n            padding={60}\n            animate={{\n                duration: 2000,\n                onLoad: { duration: 1000 }\n            }}\n            containerComponent={\n                <VictoryVoronoiContainer\n                    labels={({ datum }) => `${moment(datum.x, 'YYYY/MM/DD').format('DD-MM-YYYY')}\\n${translate(datum.name)}: ${datum.y}`}\n                    style={{touchAction: 'auto'}}\n                    labelComponent={\n                        <VictoryTooltip\n                            style={{fontSize: width < 500 ? 12 : 16}}\n                            cornerRadius={5}\n                            centerOffset={{ x: (datum) => {\n                                return datum.x < 250 ? 15 : -15\n                            }}}\n                            flyoutStyle={{\n                                stroke: '#d7d7d7',\n                                fill: 'white',\n                            }}\n                        />\n                    }\n                />\n            }\n        >\n            <VictoryAxis\n                tickCount={5}\n                tickFormat={(label) => `${moment(label, 'YYYY/MM/DD').format('DD-MM')}\\n${moment(label, 'YYYY/MM/DD').format('YYYY')}`}\n                tickLabelComponent={\n                    <VictoryLabel\n                        style={{ data: { fontSize: 32 } }}\n                    />\n                }\n            />\n            <VictoryAxis\n                style={{\n                    tickLabels: { fontSize: 16 },\n                }}\n                dependentAxis\n            />\n            <VictoryArea\n                data={confirmedGraphData}\n                style={{\n                    data: { stroke: \"rgba(52, 158, 235, 1)\", fill: \"rgba(52, 158, 235, 0.2)\" },\n                    labels: {\n                        fill: \"rgba(52, 158, 235, 1)\",\n                        fontSize: 20,\n                        padding: 5\n                    }\n                }}\n            />\n            <VictoryArea\n                data={deathGraphData}\n                style={{\n                    data: { stroke: \"rgba(230, 48, 78, 1)\", fill: \"rgba(230, 48, 78, 0.4)\" },\n                    labels: {\n                        fill: \"rgba(230, 48, 78, 1)\",\n                        fontSize: 20,\n                        padding: 5\n                    }\n                }}\n            />\n\n        </VictoryChart>\n    )\n}\n","import React from 'react';\nimport {\n    VictoryChart,\n    VictoryAxis,\n    VictoryBar,\n    VictoryTheme,\n    VictoryLabel,\n    VictoryContainer,\n} from 'victory';\n\nimport { incrementPlotGraph, incrementAverage } from '../../lib/utils';\n\nexport default function Increment({ width, mapData, type, graphColor }) {\n    const incrementData = incrementPlotGraph(mapData, type);\n    const averageData = incrementAverage(incrementData);\n\n    return (\n        <>\n            <VictoryChart\n                theme={VictoryTheme.material}\n                width={width}\n                height={550}\n                domainPadding={width < 500 ? 10 : 50}\n                animate={{\n                    duration: 2000,\n                    onLoad: { duration: 1000 }\n                }}\n                containerComponent={\n                    <VictoryContainer\n                        style={{touchAction: 'auto'}}\n                    />\n                }\n            >\n                <VictoryAxis\n                    tickCount={5}\n                    tickLabelComponent={<VictoryLabel style={{ data: { fontSize: 32 } }} />}\n                />\n                <VictoryAxis\n                    style={{\n                        tickLabels: { fontSize: 16 },\n                    }}\n                    dependentAxis\n                />\n                <VictoryBar\n                    data={incrementData}\n                    labels={({ datum }) => datum.y}\n                    style={{\n                        labels: { fill: `rgba(${graphColor}, 1)`, fontSize: () => width < 500 ? 10 : 16 },\n                        data: {\n                            fill: `rgba(${graphColor}, 0.5)`,\n                            stroke: `rgba(${graphColor}, 1)`,\n                            strokeWidth: 1,\n                        }\n                    }}\n                    labelComponent={<VictoryLabel dy={width < 500 ? 5 : -15} dx={width < 500 ? 20 : 0} angle={width < 500 ? -90 : 0} />}\n                />\n            </VictoryChart>\n            <div className='text-center italic'>\n                <p className='text-xs text-gray-700 font-thin'>Aumento Percentual médio: <span className='text-xs font-bold ml-1' style={{ color: `rgba(${graphColor}, 1)` }}>{averageData}%</span></p>\n            </div>\n        </>\n    )\n}\n","import data from '../resources/csvjson.json'\nimport { groupBy as _groupBy, mapValues as _mapValues } from 'lodash';\nimport moment from 'moment'\n\nimport { translate } from './translate'\n\nfunction groupBy(object, type) {\n    return _mapValues(_groupBy(object, type), (groupedData) => groupedData.reduce((previousValue, currentValue) => {\n        return {\n            suspects: previousValue.suspects + currentValue.suspects,\n            deaths: previousValue.deaths + currentValue.deaths,\n            cases: previousValue.cases + currentValue.cases,\n            refuses: previousValue.refuses + currentValue.refuses,\n        }\n    }));\n}\n\nfunction createPlotData (object, type) {\n    return Object.keys(object).map((key) => {\n        return {\n            x: moment(key).format('YYYY-M-DD'),\n            y: object[key][type],\n            name: translate(type)\n        }\n    }).reverse()\n}\n\nfunction createStatePlotData (type) {\n    let groupedData = _groupBy(data, 'date')\n    return groupedData[Object.keys(groupedData)[0]].map((state) => {\n        return {\n            x: state.uf,\n            y: state[type],\n            date: state.date,\n            type: translate(type),\n        }\n    })\n}\n\nconst groupedByDate = groupBy(data, 'date')\n\nconst plotSuspectsByDate = createPlotData(groupedByDate, 'suspects')\nconst plotDeathsByDate = createPlotData(groupedByDate, 'deaths')\nconst plotCasesByDate = createPlotData(groupedByDate, 'cases')\nconst plotRefusesByDate = createPlotData(groupedByDate, 'refuses')\n\nexport {\n    plotSuspectsByDate,\n    plotDeathsByDate,\n    plotCasesByDate,\n    plotRefusesByDate,\n    createStatePlotData,\n}\n","import React from 'react'\nimport {\n    VictoryChart,\n    VictoryScatter,\n    VictoryTheme,\n    VictoryAxis,\n    VictoryLabel,\n    VictoryVoronoiContainer,\n    VictoryTooltip,\n} from 'victory'\n\nimport { createStatePlotData } from '../../lib/csvLoader'\n\nexport default function ByState({width, graphColor, type}) {\n    const scatterData = createStatePlotData(type)\n    console.log(scatterData)\n    return (\n        <>\n            <VictoryChart\n                theme={VictoryTheme.material}\n                width={width}\n                height={550}\n                domainPadding={width < 500 ? 10 : 50}\n                containerComponent={\n                    <VictoryVoronoiContainer\n                        labels={({datum}) => `${datum.x}\\n${datum.type}: ${datum.y}`}\n                        style={{touchAction: 'auto'}}\n                        labelComponent={\n                            <VictoryTooltip\n                                style={{fontSize: width < 500 ? 12 : 14, fill: `rgba(${graphColor}, 1)`}}\n                                cornerRadius={5}\n                                centerOffset={{ x: (datum) => {\n                                    return datum.x < 250 ? 15 : -15\n                                }}}\n                                flyoutStyle={{\n                                    stroke: '#d7d7d7',\n                                    fill: 'white',\n                                }}\n                            />\n                        }\n                    />\n                }\n                animate={{\n                    duration: 2000,\n                    onLoad: { duration: 1000 }\n                }}\n            >\n                <VictoryAxis\n                    tickLabelComponent={\n                        <VictoryLabel\n                            dx={width < 500 ? -5 : 0} dy={width < 500 ? -5 : 0}\n                            angle={width < 600 ? -90 : 0}\n                            style={{ fontSize: width < 600 ? 10 : 14 }}\n                        />\n                    }\n                />\n                <VictoryAxis\n                    dependentAxis\n                />\n                <VictoryScatter\n                    style={{data: {fill: `rgba(${graphColor}, 1)`}}}\n                    data={scatterData}\n                />\n            </VictoryChart>\n        </>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport { throttle as _throttle } from 'lodash';\n\nimport { getData } from '../lib/api';\nimport Accumulative from './Graphs/Accumulative';\nimport Increment from './Graphs/Increment';\nimport ByState from './Graphs/ByState';\n\nfunction Graphs () {\n    const [mapData, setMapData] = useState();\n    const [width, setWidth] = useState(window.innerWidth);\n\n    const updateWidth = ev => {\n        setWidth(ev.target.innerWidth);\n    };\n\n    async function retrieveData () {\n        const apiData = await getData();\n        setMapData(apiData);\n    }\n    /* eslint-disable */\n    useEffect(() => {\n        retrieveData()\n        const interval = setInterval(() => {\n            retrieveData()\n        }, 14400000)\n        return () => clearInterval(interval);\n    }, []);\n\n    useEffect(() => {\n        window.addEventListener('resize', _throttle(updateWidth, 600));\n\n        return () => {\n            window.removeEventListener('resize', updateWidth);\n        };\n    }, []);\n    /* eslint-enable */\n    const chartGraph = mapData ?\n        <Accumulative\n            width={width}\n            mapData={mapData}\n        />\n        : null\n\n    const incrementConfirmedGraph = mapData ?\n        <Increment\n            width={width}\n            mapData={mapData}\n            type='confirmed'\n            graphColor='52, 158, 235'\n        />\n        : null\n\n    const incrementDeathMap = mapData ?\n        <Increment\n            width={width}\n            mapData={mapData}\n            type='deaths'\n            graphColor='230, 48, 78'\n        />\n        : null\n    const confirmedByState = mapData ?\n        <ByState\n            width={width}\n            graphColor='52, 158, 235'\n            type='cases'\n        />\n        : null\n    const deathsByState = mapData ?\n        <ByState\n            width={width}\n            graphColor='230, 48, 78'\n            type='deaths'\n        />\n        : null\n    return (\n        <>\n            <div className='mt-12'>\n                <h1 className='text-xl text-gray-600 mx-auto text-center'>Evolução Covid-19 / Dia</h1>\n                {chartGraph}\n            </div>\n            <div className='mt-20'>\n                <h1 className='text-xl text-blue-600 mx-auto text-center'>Incremento no número de casos confirmados / Dia</h1>\n                <h3 className='text-xs text-blue-400 mx-auto text-center'>Desde o primeiro caso</h3>\n                {incrementConfirmedGraph}\n            </div>\n            <div className='mt-20'>\n                <h1 className='text-xl text-red-600 mx-auto text-center'>Incremento no número de mortes / Dia</h1>\n                <h3 className='text-xs text-red-400 mx-auto text-center'>Desde a primeira morte</h3>\n                {incrementDeathMap}\n            </div>\n            <div className='mt-20'>\n                <h1 className='text-xl text-blue-600 mx-auto text-center'>Distribuição de casos confirmados por Estado</h1>\n                {confirmedByState}\n            </div>\n            <div className='mt-20'>\n                <h1 className='text-xl text-red-600 mx-auto text-center'>Distribuição de mortes confirmadas por Estado</h1>\n                {deathsByState}\n            </div>\n        </>\n    )\n}\n\nexport default Graphs\n","import React from 'react';\nimport 'moment/locale/pt-br';\n\nimport Header from '../components/Header'\nimport Graphs from '../components/Graphs'\n\nfunction App() {\n    return (\n        <div className=\"grid min-h-screen\" style={{placeItems: 'center'}}>\n            <Header />\n            <div className=\"w-full p-2 md:w-10/12 grid grid-cols-1\">\n                <Graphs />\n            </div>\n            <div className=\"my-16\">\n                <p className='text-xs text-gray-600 text-center opacity-75'>\n                    Dados coletados de <a className='text-blue-700' href=\"https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_time_series\">https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_time_series</a>\n                </p>\n                <p className='text-xs font-semibold text-gray-800 text-center my-8'>\n                    #FiqueEmCasa\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/tailwind.css'\nimport App from './pages/App';\n\ndocument.title='Covid-19 Brasil'\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}